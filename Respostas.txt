1)


2)

A) Espera-se que seja chamado o construtor da classe Animal, depois o construtor da casse Mamal, seguido do construtor da classe Animal novamente e do construtor da classe WingedAnimal. 

B) O compilador aponta um erro intitulado " 'Animal' is am ambiguous base of of 'Bat'". Isso ocorre porque existem duas classes (Mammal e WingedAnimal) que herdam da classe base (Animal). E quando é criado a quarta classe (Bat), acabam sendo gerado dois "caminhos" até a classe base, uma pssando pela classe Mammal e outra pela classe WingedAnimal. Isso gera uma ambiguidade, como no erro mostrado pelo compilador. 

C) O código desta letra encontra-se no arquivo bat02.cpp. Desta vez, o código será compilado normalmente, porém, o construtor da classe base (Animal) ainda será inicializado duas vezes. 

D) O código desta letra encontra-se no arquivo bat03.cpp. Quando utilizamos a noção de base virutal, a ambiguidade é retirada e o programa compila normalmente e o construtor da classe Animal é executado apenas uma vez. 

E) Não porque a classe Mammal não possui uma função chamada Flap, nem acesso a alguma função chamada Flap.

3)

A) Uma função amiga (friend function) é declarada dentro do escopo da classe e definida fora do escopo da classe, mas tem o direito de acessar todos os membros publicos e privados da classe. Funções amigas não são consideradas funções membro. Uma classe amiga em C++ pode acessar os membros privados (keyword private) e protegidos (keyword protected) da classe em que ela é declarada como amiga. 

B) De fato, uma função amiga, apesar de ser definida dentro do escopo de uma classe, não é considerada uma função membro da classe. Funções e classes amigas servem, entre outras coisas, para que possamos ter acesso aos dados de outras classes para realizar certos objetivos. O código da questão 3 nos mostra um bom uso de uma função amiga, pois cria uma friend function para estabelecer novos valores de um objeto e retorná-lo como argumento para um objeto criado na função main. 

C) Se descomentarmos a linha 13, a função Rectangle não será mais considerada uma função amiga e não poderá ter acesso aos membros privados da classe (tais como width e height). 

4) 

A) a linha 6 do código serve para declarar que existe uma classe chamada Square e que será desenvolvida mais tarde na função. Foi necessário fazer isso pois no código, a função Rectangle é declarada e desenvolvida primeiro que a Square, então é necessário que o compilador "saiba" que existe uma classe Square adiante, caso não, haverá um erro na compilação.

B) A linha 13 contém a declaração de uma função que recebe como parâmetro um argumento do tipo Square. Como a função Square não foi desenvolvida previamente, é necessário que as declarações na linha 6 sejam feitas, para que assim o compilador saiba que existe uma classe Square. 

C) A relação de amizade em C++ é transitiva e não simétrica, pois se uma classe A é amiga de uma classe B, isso não significa que uma classe B seja amiga de A. 

5)

A) A linha 12 contém a função assert, cuja utilidade é a de mostrar uma mensagem de erro e terminar o programa caso a declaração usada seja falsa. 

B)

6)

A) O código desta questão se encontra no arquivo list0901v2.cpp

B) Salvamos o novo código, testamos e achamos interessante como a printagem dos elementos do vector data foi simplificada por meio do loop for baseado em escala (range-based). 

7) 

A) O código foi lido e entendido pelo grupo.

B) O código deste item se encontra no arquivo list1004.cpp

C) O código deste item se encontra no arquivo list1005.cpp 
